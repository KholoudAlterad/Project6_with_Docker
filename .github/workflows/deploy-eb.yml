name: Deploy to Elastic Beanstalk (Docker)

on:
  push:
    branches: [master]     # adjust if you use main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: eb-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EB_APP_NAME: ${{ secrets.EB_APP_NAME }}
  EB_ENV_NAME: ${{ secrets.EB_ENV_NAME }}
  EB_S3_BUCKET: ${{ secrets.EB_S3_BUCKET }}
  ECR_BACKEND: ${{ secrets.ECR_BACKEND }}     # e.g. 123456789012.dkr.ecr.us-east-1.amazonaws.com/project5-backend
  ECR_FRONTEND: ${{ secrets.ECR_FRONTEND }}   # e.g. 123456789012.dkr.ecr.us-east-1.amazonaws.com/project5-frontend

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Configure AWS via OIDC
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # Authenticate Docker to ECR
      - name: Log in to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin "${ECR_BACKEND%/*}"
      
      # Build backend image (reuse existing Dockerfile)
      - name: Build backend image
        run: |
          docker build -t "$ECR_BACKEND:${GITHUB_SHA::7}" backend
          docker tag "$ECR_BACKEND:${GITHUB_SHA::7}" "$ECR_BACKEND:latest"
      
      # Build frontend image (existing Dockerfile expects build to happen inside)
      - name: Build frontend image
        run: |
          docker build -t "$ECR_FRONTEND:${GITHUB_SHA::7}" frontend
          docker tag "$ECR_FRONTEND:${GITHUB_SHA::7}" "$ECR_FRONTEND:latest"
      
      # Push both images
      - name: Push backend image
        run: |
          docker push "$ECR_BACKEND:${GITHUB_SHA::7}"
          docker push "$ECR_BACKEND:latest"

      - name: Push frontend image
        run: |
          docker push "$ECR_FRONTEND:${GITHUB_SHA::7}"
          docker push "$ECR_FRONTEND:latest"

      # Generate Dockerrun and docker-compose bundle for EB Docker platform
      - name: Generate Dockerrun
        run: |
          cat > Dockerrun.aws.json <<'JSON'
          {
            "AWSEBDockerrunVersion": 3,
            "containerDefinitions": []
          }
          JSON

      - name: Generate docker-compose
        run: |
          cat > docker-compose.yml <<'YML'
          version: '3'
          services:
            frontend:
              image: ${ECR_FRONTEND}:${GITHUB_SHA::7}
              ports:
                - "80:80"
              restart: always
            backend:
              image: ${ECR_BACKEND}:${GITHUB_SHA::7}
              ports:
                - "8000:8000"
              restart: always
          YML

      # Package Dockerrun, compose file, and optional EB config
      - name: Prepare bundle
        run: |
          if [ -d .ebextensions ]; then
            zip -r bundle.zip Dockerrun.aws.json docker-compose.yml .ebextensions -x "*.git*"
          else
            zip bundle.zip Dockerrun.aws.json docker-compose.yml
          fi

      # Upload bundle and deploy as new EB application version
      - name: Upload & deploy
        run: |
          VERSION="docker-${GITHUB_SHA::7}"
          S3_KEY="${EB_APP_NAME}/${VERSION}.zip"
          aws s3 cp bundle.zip "s3://${EB_S3_BUCKET}/${S3_KEY}"
          aws elasticbeanstalk create-application-version \
            --application-name "$EB_APP_NAME" \
            --version-label "$VERSION" \
            --source-bundle S3Bucket="$EB_S3_BUCKET",S3Key="$S3_KEY"
          aws elasticbeanstalk update-environment \
            --environment-name "$EB_ENV_NAME" \
            --version-label "$VERSION"
          aws elasticbeanstalk wait environment-updated \
            --environment-names "$EB_ENV_NAME"